#!/usr/bin/env python
##/usr/bin/python3
# https://www.delftstack.com/howto/python/python-play-mp3/
# https://schedule.readthedocs.io/en/stable/
import os
import sys, subprocess, re
import random
import glob
import schedule
import time
# from termux import API as api
import requests
from bs4 import BeautifulSoup as BS

#path=os.getcwd() + r'/*.MP3'
#def hello_world:
#	print("Hello World")

VOL_URL = r'http://epics.iiipfn.tecnico.ulisboa.pt/volume.html'

def get_volume():
    try:
        page = requests.get(VOL_URL)
        soup = BS(page.content, 'html.parser')
        vol = soup.find(id="volume")
        voli = vol.text
        print(f'Setting Vol = {voli}')
        err = subprocess.check_output(["termux-volume", "music", voli])
    except (Exception, ConnectionError) as e:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(e).__name__, e.args)
        print ("excp")
        print (message)

# print(soup)
#    print(soup.title)

def get_songs():
    path=os.getcwd() + r'/songs/*.??3'
    files = glob.glob(path)
    return files

def wait_end():
    err = subprocess.check_output(["termux-media-player", "info"])
    out = err.decode()
    status = re.split("\s", out)[0]
    print(status)
    if (status != r'No'):
        return True
    else:
        return False

def play_silent():
    path=os.getcwd()
    file = path + r'/silent/silent3.mp3'
    err = subprocess.check_output(["termux-media-player", "play", file])

def play_blocking(song):
    # path=os.getcwd()
    # file = path + song
    # cmd = "termux-media-player play '" + file +"'"
    err = subprocess.check_output(["termux-media-player", "play", song])
    seconds = 10
    while (wait_end()):
        print(f'waiting {seconds}')
        time.sleep(seconds)
        get_volume()

def play_random():
    #schedulep.cancel_job(silent_job)
    sil = schedule.get_jobs('silent')
    schedule.cancel_job(sil)
    # 
    files = get_songs()
    # for i in range(2):
    for f in files:
        #song = songs[i]
        song = random.choice(files)
        print("playing " + song)
        play_blocking(song)
    # restart keep bluetooth connection
    schedule.every(1).minutes.do(play_silent).tag('alive-task', 'silent')
    #path=os.getcwd()

    # file = path + r'/silent/silent3.mp3'
    #file = path + r'/songs/01_Seattle.mp3'
    #song =r'/songs/01_Seattle.mp3'
    # play_blocking(song)
    # cmd = "termux-media-player play '" + file +"'"
#    err = subprocess.check_output(["termux-media-player", "play", file])
    #print("end song")
    # os.system(cmd)
    # api.generic(cmd)
    #file = path + r'/songs/02_Chutzpan.mp3'
    #song = r'/songs/02_Chutzpan.mp3'
    # os.system(cmd)
    #err = subprocess.check_output(["termux-media-player", "play", file])

# Run every 5 to 10 seconds.
#schedule.every(1).to(4).seconds.until(timee).do(play_mp3)

# play_mp3()
# files=os.listdir(path)
# while True:
#    schedule.run_pending()
#    time.sleep(1)

# Defining main function
def main():
    if len(sys.argv) > 1:
        time_start = str(sys.argv[1])
    else:
        time_start = r'19:00'

# schedule.every(1).minutes.do(play_silent)
    schedule.every().day.at(time_start).do(play_random)
    schedule.every(1).minutes.do(play_silent).tag('alive-task', 'silent')

    while 1:
        n = schedule.idle_seconds()
        if n is None:
            # no more jobs
            break
        elif n > 0:
        # sleep exactly the right amount of time
            print(F'Wait {n} seconds')
            time.sleep(n)
        schedule.run_pending()

# Using the special variable 
# __name__
if __name__=="__main__":
    main()
